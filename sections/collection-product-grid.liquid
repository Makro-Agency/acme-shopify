{{ 'ajaxinate.min.js' | asset_url | script_tag }}

<style>
  .new-btn{
    max-width: 320px;
    padding: .6rem 1.2rem .5rem;
    font-size: .875rem;
    background:#14315c !important;
    color: #FFF !important;
  }
</style>


<section class="section-collection-title header-1">
    <div class="container">
        <h1 class="mb-3">
        {% if collection.handle == "all" %}
          All Products
        {% else %}
          {{ collection.title }}
        {% endif %}
        </h1>
    </div>
</section>
<div class = 'd-none'>
  {{ collection.all_products_count }}
</div>
{% render "filters" filters: section.settings.filters custom_collection: section.settings.custom_collection -%}

<section class='section-product-grid'>
    <div class='container'>
      {% paginate collection.products by 9 %}
          <div class='row d-flex flex-column align-items-center flex-md-row align-items-md-start justify-content-md-between' id="products-container" mx-filter-results>
              
                  {% for product in collection.products %}
                      {% unless product.tags contains 'private' or product.tags contains 'Private' or product.tags contains 'PRIVATE' %}
                          <div
                              mx-filter-result
                              class='{% for tag in product.tags %} {{ tag | handleize }}{% endfor %}'
                              data-product-id="{{ product.id }}" 
                              data-title="{{ product.title }}" 
                              data-date="{{ product.created_at }}" 
                              data-price="{{ product.price }}"
                              data-index="{{ forloop.index0 }}"
                          >
                              {% render 'product-grid-item' product: product %}
                          </div>
                      {% endunless %}
                  {% endfor %}
                
                  
          </div>
        {%- if paginate.pages > 1 -%}
          <div id="AjaxinatePagination">
            <div class="page-pagination">
                {% render 'pagination' paginate: paginate %}
            </div>
          </div>
      {%- endif -%}
  {% endpaginate %}
    </div> 
    {% if collection.products.size == 0 %}
      <div class="container">
        <div class="row">
          <div class="col-lg-6 offset-lg-3 text-center py-5" >
            <h2>
                {% if collection.handle == 'fish-friday' %}
                  <p>{{ 'sections.collection_template.fish_friday_no_matches_html' | t }}</p>
                {% else %}
                  <p>{{ 'sections.collection_template.general_no_matches_html' | t }}</p>
                {% endif %}
            </h2>
          </div>
        </div>
      </div>
    {% endif %}
</section> 

<script>
  document.addEventListener("DOMContentLoaded", function() {
    var endlessScroll = new Ajaxinate();
  });

  function getNextMondays(count = 7) {

    const inputTime = "{{settings.cut-time}}:00";
    var tempBitValue = '{{customer.current_company.metafields.acme.delivery_date}}';
    if(tempBitValue.split("").length == 7){
        var Availdays = [],Today = new Date(),Tomorrow = new Date(Today);
        Tomorrow.setDate(Today.getDate() + 1);
        var count = 7;
    
        var BitValue = tempBitValue.slice(6) + tempBitValue.slice(0,6);
        
    
        var checkCount = 0;
        for (let i = 0; i < count; i++) {
            const dayOfWeek = Tomorrow.getDay();
            if(BitValue[(dayOfWeek)] == '1'){
                if(checkCount==0 && hasEstTimePassedToday(inputTime)){
                    count++;
                    checkCount++;
                }else{
                    var store_month = (Tomorrow.getMonth() + 1);
                    var DateFormat = `${Tomorrow.getFullYear()}-${store_month < 10 ? ('0'+store_month) : store_month}-${Tomorrow.getDate() < 10 ? ('0'+Tomorrow.getDate()) : Tomorrow.getDate()}`
                    Availdays.push(DateFormat);
                    checkCount++;
                }
            }else{
                if(checkCount == 0){
                    checkCount++;
                }
                count++;
            }
            Tomorrow.setDate(Tomorrow.getDate() + 1)
        }

        var currentstore_month = (Today.getMonth() + 1);
        var currentDateFormat = `${Today.getFullYear()}-${currentstore_month < 10 ? ('0'+currentstore_month) : currentstore_month}-${Today.getDate() < 10 ? ('0'+Today.getDate()) : Today.getDate()}`
        Availdays.push(currentDateFormat)
    
        return Availdays;
    }else{
        var Availdays = '';
        return Availdays;
    }

    
  }

  function hasEstTimePassedToday(inputTime) {
    const estNow = new Date().toLocaleString('en-US', { timeZone: 'America/New_York' });
    const nowEstDate = new Date(estNow);
    
    const [inputHour, inputMinute] = inputTime.split(':').map(Number);
    
    const targetEstTime = new Date(nowEstDate);
    targetEstTime.setHours(inputHour, inputMinute, 0, 0);
    
    return nowEstDate >= targetEstTime;
  }

  {% if customer.current_company.metafields.acme.delivery_date != blank %}
    var nextMondays = getNextMondays();
    if(nextMondays != ''){
        var tempcurrentDay = nextMondays.pop();
    }
  {% else %}
    var nextMondays = '';
  {% endif %}

  function addcarttrigger(ele){
    ele.closest('div').classList.add('active');
    var v_id = parseInt(ele.closest('div').querySelector('.product-qty').dataset.id);
    if(nextMondays == ''){
      var productData = { 
          id: v_id,
          quantity: 1
      };
    }else{
      var productData = { 
          id: v_id,
          quantity: 1,
          properties: {
              "_delivery_date":nextMondays,
              "_addtocart_date":tempcurrentDay
          }
      };
    }
    fetch("/cart/add.js", {
      method: "POST",
      headers: {
          "Content-Type": "application/json",
      },
      body: JSON.stringify({
          items: [productData],
      }),
    }).then(response => {
      if (!response.ok) {
      throw new Error('Network response was not ok');
      }
      return response.json();
    }).then(result => {
        console.log('Added',result);
    }).catch(error => {
        console.error('There was a problem with the fetch operation:', error);;
    }).finally(() => {
      console.log('finally');
    });
    //ele.closest('form').querySelector('.product-form__footer .product-form__item button[name="add"]').click();
  }

  var clickAttrPlus = function (plusSelector){
    var currentVal = parseInt(plusSelector.dataset.val);
    plusSelector.closest('.product-qty').querySelector('input').value = currentVal + 1;
    
    var v_id = plusSelector.closest('.product-qty').dataset.id;
    var updates = {};
    if(nextMondays == ''){
      var productData = { 
          id: v_id,
          quantity: parseInt(plusSelector.closest('.product-qty').querySelector('input').value)
      };
    }else{
      var productData = { 
          id: v_id,
          quantity: parseInt(plusSelector.closest('.product-qty').querySelector('input').value),
          properties: {
              "_delivery_date":nextMondays,
              "_addtocart_date":tempcurrentDay
          }
      };
    }
    fetch("/cart/change.js", {
      method: "POST",
      headers: { "Accept": "application/json", "Content-Type": "application/json" },
      body: JSON.stringify(productData)
    }).then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    }).then(result => {
        console.log('updated',result);
    }).catch(error => {
        console.error('There was a problem with the fetch operation:', error);;
    }).finally(() => {
      console.log('finally');
    });
  };

  var clickAttrMinus = function (minusSelector){

      var currentVal = parseInt(minusSelector.dataset.val);
      if(currentVal > 0){
        minusSelector.closest('.product-qty').querySelector('input').value = currentVal - 1;
        var v_id = minusSelector.closest('.product-qty').dataset.id;
        var updates = {};
        nextMondays = '';
        if(nextMondays == ''){
          var productData = { 
              id: v_id,
              quantity: parseInt(minusSelector.closest('.product-qty').querySelector('input').value)
            }
          };
        }else{
          var productData = { 
              id: v_id,
              quantity: parseInt(minusSelector.closest('.product-qty').querySelector('input').value),
              properties: {
                  "_delivery_date":nextMondays,
                  "_addtocart_date":tempcurrentDay
              }
          };
        }
        fetch("/cart/change.js", {
          method: "POST",
          headers: { "Accept": "application/json", "Content-Type": "application/json" },
          body: JSON.stringify(productData)
        }).then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        }).then(result => {
            console.log('updated',result);
        }).catch(error => {
            console.error('There was a problem with the fetch operation:', error);;
        }).finally(() => {
          console.log('finally');
        });
      }
  };

  
</script>

{% schema %}
{
  "name": "Product Grid",
  "tag": "section",
  "class": "section-collection-product-grid",
  "settings": [
    {
      "type": "collection",
      "id": "custom_collection",
      "label": "Collection",
      "info": "Leave blank to display the default collection."
    },
    {
      "type": "header",
      "content": "Sort Options"
    },
    {
      "type": "checkbox",
      "id": "sortby_featured",
      "label": "Sort by: Featured",
      "default": true,
      "info": "Sorts according to the order the products are listed in the collection."
    },
    {
      "type": "checkbox",
      "id": "sortby_title_alphabetically",
      "label": "Sort by: Title Alphabetically",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "sortby_price",
      "label": "Sort by: Price",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "sortby_date_added",
      "label": "Sort by: Date Added",
      "default": true
    }
  ],
  "templates": [
    "collection"
  ],
  "presets": [
    {
      "name": "Shop Product Grid",
      "settings": {
      }
    }
  ]
}
{% endschema %}