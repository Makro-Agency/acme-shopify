<div class="cart__submit-controls">
	{% comment %} <input type="submit" name="update"
	class="btn mt-0 mb-0 btn-primary cart__submit "
	value="{{ 'cart.buttons.update' | t }}" 
	data-btn-cart-update > {% endcomment %}
	{% comment %} {% if customer.b2b? and customer.company_available_locations_count > 0 %}
		<input type="button" class="btn btn-primary mt-4 mb-0 cart__submit" onclick="submitForm();"
			value="{{ 'cart.buttons.checkout' | t }}">
	{% endif %} {% endcomment %}
	{% comment %} <input type="submit" name="checkout"
	class="btn btn-primary mt-4 mb-0 cart__submit {% if customer.b2b? and customer.company_available_locations_count > 0 %}hide{% endif %}"
	value="{{ 'cart.buttons.checkout' | t }}"
	data-btn-cart-submit> {% endcomment %}
	<input type="submit" name="checkout"
		class="btn btn-primary mt-4 mb-0 cart__submit"
		value="{{ 'cart.buttons.checkout' | t }}"
		data-btn-cart-submit>
	
</div>

{% if customer.b2b? and customer.company_available_locations_count > 0 %}
	<style>
	#birdchime-slots-box{display:none;}
	</style>
{% endif %}

<script>

	function observeSlotsBox() {
		const slotsBox = document.querySelector("#birdchime-slots-box");
	
		if (slotsBox) {
			// Stop polling once the element is found
			clearInterval(checkExistInterval);
	
			const observer = new MutationObserver(() => {
				clearTimeout(observer.debounceTimer); // Clear any previous timers
				observer.debounceTimer = setTimeout(() => {
					const checkoutBtn = document.querySelector(`input[name=checkout]`);
					if (checkoutBtn) {
						const newBtn = checkoutBtn.cloneNode(true);
						checkoutBtn.replaceWith(newBtn);
					}
				}, 1500);
			});
	
			observer.observe(slotsBox, { childList: true, subtree: true });
		}
	}
	
	
	{% if customer.b2b? and customer.company_available_locations_count > 0 %}
	const checkExistInterval = setInterval(observeSlotsBox, 500);
	{% endif %}
</script>


